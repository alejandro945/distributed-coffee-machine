//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `CoffeMach.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package servicios;

public class Alarma implements java.lang.Cloneable,
                               java.io.Serializable
{
    public int idAlarma;

    public int codMaquina;

    public int externalType;

    public boolean isTerminated;

    public String message;

    public Alarma()
    {
        this.message = "";
    }

    public Alarma(int idAlarma, int codMaquina, int externalType, boolean isTerminated, String message)
    {
        this.idAlarma = idAlarma;
        this.codMaquina = codMaquina;
        this.externalType = externalType;
        this.isTerminated = isTerminated;
        this.message = message;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Alarma r = null;
        if(rhs instanceof Alarma)
        {
            r = (Alarma)rhs;
        }

        if(r != null)
        {
            if(this.idAlarma != r.idAlarma)
            {
                return false;
            }
            if(this.codMaquina != r.codMaquina)
            {
                return false;
            }
            if(this.externalType != r.externalType)
            {
                return false;
            }
            if(this.isTerminated != r.isTerminated)
            {
                return false;
            }
            if(this.message != r.message)
            {
                if(this.message == null || r.message == null || !this.message.equals(r.message))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::servicios::Alarma");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, idAlarma);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, codMaquina);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, externalType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isTerminated);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, message);
        return h_;
    }

    public Alarma clone()
    {
        Alarma c = null;
        try
        {
            c = (Alarma)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.idAlarma);
        ostr.writeInt(this.codMaquina);
        ostr.writeInt(this.externalType);
        ostr.writeBool(this.isTerminated);
        ostr.writeString(this.message);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.idAlarma = istr.readInt();
        this.codMaquina = istr.readInt();
        this.externalType = istr.readInt();
        this.isTerminated = istr.readBool();
        this.message = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Alarma v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Alarma ice_read(com.zeroc.Ice.InputStream istr)
    {
        Alarma v = new Alarma();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Alarma> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Alarma v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Alarma> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Alarma.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Alarma _nullMarshalValue = new Alarma();

    /** @hidden */
    public static final long serialVersionUID = -707008221L;
}
